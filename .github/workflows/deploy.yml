
# GitHub Action for deploying the Next.js app to Firebase Hosting

name: Deploy Next.js to Firebase Hosting

on:
  push:
    branches:
      - backend_intregation # This workflow runs on pushes to this branch.
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    # These environment variables are used by the `npm run build` command.
    # You must add these as secrets in your GitHub repository settings:
    # Settings > Secrets and variables > Actions > New repository secret
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
      NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
      NEXT_PUBLIC_FIREBASE_VAPID_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_VAPID_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a Node.js version that matches your environment
          cache: 'npm'

      - name: Install Dependencies
        # Use 'npm ci' for cleaner, more reliable installs in CI environments
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          # This secret is the content of the JSON file for a Firebase Service Account.
          # 1. Go to your Firebase Project Settings > Service accounts.
          # 2. Generate a new private key and download the JSON file.
          # 3. In GitHub, go to Settings > Secrets and variables > Actions.
          # 4. Create a new secret named FIREBASE_SERVICE_ACCOUNT and paste the entire JSON content.
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          # This should be the ID of your live Firebase Hosting channel, typically 'live'.
          channelId: live
          # Your Firebase Project ID. It's best to also set this as a secret.
          projectId: '${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}'
